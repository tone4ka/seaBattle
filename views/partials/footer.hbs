<script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
<script src="/app.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
{{#if isAuth}}
<script>
    $(function() {
        const socket = io.connect();
        const usersBox = $('.usersBox');
        let currentEnemyName = 'noEnemy';
        let currentUserName = $('.currentUserName');
        currentUserName = currentUserName.text().split(' ')[2];
        let usersList = [];
        let userInGame = false;
        
        function createUsersList() {
                usersBox.empty();
                const myIndex = usersList.indexOf(currentUserName);
                usersList.splice(myIndex, 1);
                if(!usersList.length){
                        usersBox.append(`<p> The sea is calm... The enemy is absent. </p>`);
                } else {
                    usersList.forEach((userName) => {
                        usersBox.append(`
                        <div class="userBox ${userName}Box">
                        <p> ${userName} </p>
                        <button class="btn btnSocket btn-blue inviteBtn ${userName}">Invite to the game</button>
                        </div>
                        `);
                    });
                }
        };

        socket.on("connect", () => {
            console.log("clients connection:");
            console.log(currentUserName);
            socket.emit('new user', {name: currentUserName});
        });
        socket.on('update', (data) => {
            usersList = [...data.usersArr];
            if(data.connectedUser == currentUserName){
                createUsersList();
            } else if(data.disconnectedUser){
                if (data.disconnectedUser == currentEnemyName) {
                    usersBox.empty();
                    currentEnemyName = 'noEnemy';
                    usersBox.append(`
                        <div class="enemyCapitulated">
                            <h5>Your opponent has surrendered!<h5>
                            <button class="btn btnSocket acceptSurrenderBtn">Accept surrender</button>
                        </div>
                    `);
                } else {
                  if(!userInGame) $(`.${data.disconnectedUser}Box`).remove();  
                }
            } else if(!userInGame) {
                usersBox.append(`
                    <div class="userBox ${data.connectedUser}Box">
                    <p> ${data.connectedUser} </p>
                    <button class="btn btnSocket btn-blue inviteBtn ${data.connectedUser}">Invite to the game</button>
                    </div>
                    `);
            } else { console.log('............clients socket updation error................') }
        });
        usersBox.click((event) => {
            if(event.target.classList.contains('btnSocket')){
                const currentBtn = event.target;
                const enemyName = Array.from(currentBtn.classList).slice(-1)[0];
                const enemyBox = $(`.${enemyName}Box`);
                if(event.target.classList.contains('inviteBtn')){
                    currentBtn.remove();
                    enemyBox.append(`
                            <button class="btn btnSocket inaccessibleInviteBtn ${enemyName}">User was invited</button>
                            `);
                    socket.emit("invite user", {invitedUserName: enemyName, inviterName: currentUserName});
                };
                if(event.target.classList.contains('invitationUnswerBtn')){
                    usersBox.empty();
                    usersBox.append('<p>loading....................</p>');
                    socket.emit("start game", {respondingUserName: currentUserName, inviterName: enemyName});
                };
                if(event.target.classList.contains('acceptSurrenderBtn')){
                     userInGame = false;
                     socket.emit('userLeftTheGame', {name: currentUserName});
                     createUsersList();
                 };
            };
        });
        socket.on('invitation created', (data) => {
            if(data.inviterName != currentUserName && data.invitedUserName == currentUserName){
                let inviterBox = $(`.${data.inviterName}Box`);
                let inviterBtn = $(`.${data.inviterName}`);
                inviterBox.empty();
                inviterBox.append(`
                        <p> ${data.inviterName} </p>
                        <button class="btn btnSocket invitationUnswerBtn ${data.inviterName}">Take the fight?</button>
                        `);
               
            }
        });
        socket.on('the game has begun', (data) => {
            if(data.inviterName == currentUserName || data.respondingUserName == currentUserName){
                currentEnemyName = data.inviterName == currentUserName ? data.respondingUserName : data.inviterName;
                userInGame = true;
                usersBox.empty();
                usersBox.append(`
                <div class="gameBox">
                <button class="btn btnSocket btn-blue startGameBtn ${currentEnemyName}">Start game</button>
                </div>
                `);
                const gameBox = $('.gameBox');
            } else {
                const inviterBtn  = $(`.${data.inviterName}`);
                const responderBtn =  $(`.${data.respondingUserName}`);
                inviterBtn.remove();
                responderBtn.remove();
                const inviterBox  = $(`.${data.inviterName}Box`);
                const responderBox =  $(`.${data.respondingUserName}Box`);
                inviterBox.append(`
                        <button class="btn btnSocket inaccessibleInviteBtn ${data.inviterName}">User in battle</button>
                        `);
                responderBox.append(`
                        <button class="btn btnSocket inaccessibleInviteBtn ${data.respondingUserName}">User in battle</button>
                        `);
            }
        });
        socket.on(`${currentUserName}`, (data) => {
             const newDataFromEnemy = new Event('newDataFromEnemy');
                 newDataFromEnemy.detail = {
                        field: [...data.field],
                        currentEvent: data.currentEvent,
                        gameConstants: data.gameConstants
                    };
             const container = document.querySelector('.container');
             container.dispatchEvent(newDataFromEnemy);
        });
        $('.container').bind('sendDataToEnemy', (event) => {
             socket.emit(`dataToEnemy`, {
                 enemyName: currentEnemyName,
                 currentEvent:  event.detail.currentEvent,
                 field: event.detail.field,
                 gameConstants: event.detail.gameConstants
                 });
        })
    });
</script>
<script type="module" src="/game_client/game.js"></script>
{{/if}}